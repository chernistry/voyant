#!/usr/bin/env node

/**
 * Custom Test Runner
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã –∏–∑ –ø–∞–ø–∫–∏ custom/ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
 */

const { spawn } = require('child_process');
const path = require('path');

const args = process.argv.slice(2);
const command = args[0] || 'all';

// –û–ø—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
const commands = {
  all: {
    cmd: 'npm',
    args: ['run', 'test:custom'],
    desc: '–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö custom —Ç–µ—Å—Ç–æ–≤'
  },
  api: {
    cmd: 'npm',
    args: ['run', 'test:custom:api'],
    desc: '–¢–µ—Å—Ç—ã API –∏ CLI'
  },
  search: {
    cmd: 'npm',
    args: ['run', 'test:custom:search'],
    desc: '–¢–µ—Å—Ç—ã –ø–æ–∏—Å–∫–∞ –∏ –≤–µ–±-–∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏'
  },
  fallback: {
    cmd: 'npm',
    args: ['run', 'test:custom:fallback'],
    desc: '–¢–µ—Å—Ç—ã fallback –º–µ—Ö–∞–Ω–∏–∑–º–æ–≤'
  },
  core: {
    cmd: 'npm',
    args: ['run', 'test:custom:core'],
    desc: '–¢–µ—Å—Ç—ã –æ—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–∏–∫–∏'
  },
  tools: {
    cmd: 'npm',
    args: ['run', 'test:custom:tools'],
    desc: '–¢–µ—Å—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤'
  },
  security: {
    cmd: 'npm',
    args: ['run', 'test:custom:security'],
    desc: '–¢–µ—Å—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏'
  },
  transcripts: {
    cmd: 'npm',
    args: ['run', 'test:custom'],
    env: { RECORD_TRANSCRIPTS: 'true' },
    desc: '–ó–∞–ø—É—Å–∫ —Å –∑–∞–ø–∏—Å—å—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–æ–≤'
  },
  watch: {
    cmd: 'npx',
    args: ['jest', '--runInBand', '--testPathPattern=tests/custom/', '--watch'],
    desc: '–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏—è'
  },
  working: {
    cmd: 'npm',
    args: ['run', 'test:custom:working'],
    desc: '–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ —Ç–µ—Å—Ç–∞'
  },
  very_simple: {
    cmd: 'npm',
    args: ['run', 'test:custom:very-simple'],
    desc: '–ó–∞–ø—É—Å–∫ –æ—á–µ–Ω—å –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–∞'
  },
  unit: {
    cmd: 'npm',
    args: ['run', 'test:unit'],
    desc: '–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö unit —Ç–µ—Å—Ç–æ–≤'
  },
  integration: {
    cmd: 'npm',
    args: ['run', 'test:integration'],
    desc: '–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö integration —Ç–µ—Å—Ç–æ–≤'
  }
};

function showHelp() {
  console.log('\nüöÄ Custom Test Runner\n');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/run-custom-tests.js [command]\n');
  console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
  Object.entries(commands).forEach(([cmd, config]) => {
    console.log(`  ${cmd.padEnd(12)} - ${config.desc}`);
  });
  console.log('\n–ü—Ä–∏–º–µ—Ä—ã:');
  console.log('  node scripts/run-custom-tests.js all        # –í—Å–µ —Ç–µ—Å—Ç—ã');
  console.log('  node scripts/run-custom-tests.js api        # –¢–æ–ª—å–∫–æ API —Ç–µ—Å—Ç—ã');
  console.log('  node scripts/run-custom-tests.js search     # –¢–æ–ª—å–∫–æ –ø–æ–∏—Å–∫');
  console.log('  node scripts/run-custom-tests.js transcripts # –° —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ç–∞–º–∏');
  console.log('  node scripts/run-custom-tests.js watch      # –†–µ–∂–∏–º –Ω–∞–±–ª—é–¥–µ–Ω–∏—è');
  console.log('');
}

function runCommand(cmd, args, env = {}) {
  console.log(`\n‚ñ∂Ô∏è  –ó–∞–ø—É—Å–∫: ${cmd} ${args.join(' ')}\n`);

  const child = spawn(cmd, args, {
    stdio: 'inherit',
    cwd: path.join(__dirname, '..'),
    env: { ...process.env, ...env }
  });

  child.on('close', (code) => {
    console.log(`\n${code === 0 ? '‚úÖ' : '‚ùå'} –ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –∫–æ–¥–æ–º: ${code}`);
    process.exit(code);
  });

  child.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:', error);
    process.exit(1);
  });
}

if (!commands[command]) {
  console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
  showHelp();
  process.exit(1);
}

const config = commands[command];
runCommand(config.cmd, config.args, config.env);
